name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest flake8 black mypy
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check --diff .
        
    - name: Type checking with mypy
      run: |
        mypy --ignore-missing-imports .
      continue-on-error: true
        
    - name: Test imports
      run: |
        python -c "
        import sys, os
        sys.path.append('.')
        try:
            from lora_auto_downloader import LoRAAutoDownloader
            from auto_lora_detector import AutoLoRADetector
            print('✓ All imports successful')
        except Exception as e:
            print(f'✗ Import failed: {e}')
            sys.exit(1)
        "
        
    - name: Syntax check all Python files
      run: |
        python -m py_compile lora_auto_downloader.py
        python -m py_compile auto_lora_detector.py
        python -m py_compile workflow_interceptor.py
        
    - name: Test node instantiation
      run: |
        python -c "
        import sys, os
        sys.path.append('.')
        try:
            from lora_auto_downloader import LoRAAutoDownloader
            from auto_lora_detector import AutoLoRADetector
            
            # Test instantiation
            detector = AutoLoRADetector()
            downloader = LoRAAutoDownloader()
            
            print('✓ Node instantiation successful')
        except Exception as e:
            print(f'✗ Node instantiation failed: {e}')
            sys.exit(1)
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run security checks with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true
        
    - name: Check dependencies for known vulnerabilities
      run: |
        pip install requests
        safety check || true
      continue-on-error: true
